openapi: 3.0.0
servers:
  - url: 'https://bankapp.com/v1'
    description: Production server
  - url: 'http://localhost:3000/v1'
    description: Testing local server
info:
  version: 1.0.0
  title: Web Banking Application API
  description: The API for the web banking application

paths:
  /register:
    get:
      summary: Serves register page
      tags:
        - auth
      responses:
        '200':
          description: Register page returned successfully
          content:
            text/html:
              schema:
                type: string
                example: "<html>...</html>"
    post:
      summary: Sending sign-up form to register
      tags:
        - auth
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: User created
        '400':
          description: Bad Request – Missing or malformed registration data
        '409':
          description: Conflict – Email already in use

  /login:
    get:
      summary: Serves login page
      tags:
        - auth
      responses:
        '200':
          description: Login page returned successfully
          content:
            text/html:
              schema:
                type: string
                example: "<html>...</html>"
    post:
      summary: Logging into the bank app
      tags:
        - auth
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad Request – Missing or malformed login credentials
        '401':
          description: Unauthorized – Incorrect email or password or expired/invalid token

  /users:
    get:
      summary: Get a list of users (with optional pagination and filtering)
      tags:
        - admin
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: string
            example: "name"
        - name: filter
          in: query
          required: false
          schema:
            type: string
            example: "email:verified"
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      summary: Create a new user
      tags:
        - admin
      security:
        - BearerAuth: []
      requestBody:
        description: User object to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Get a user by ID
      tags:
        - admin
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
      responses:
        '200':
          description: The user's details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    put:
      summary: Update user by ID
      tags:
        - admin
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
      requestBody:
        description: User object with updated details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    patch:
      summary: Partially update a user by ID
      tags:
        - admin
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
      requestBody:
        description: Fields to update in the user object.
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                name:
                  type: string
      responses:
        '200':
          description: User partially updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    delete:
      summary: Delete a user by ID
      tags:
        - admin
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to delete
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully.
        '404':
          description: User not found

  /user/home:
    get:
      summary: Serves dashboard page
      tags:
        - dashboard
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Dashboard page returned successfully
          content:
            text/html:
              schema:
                type: string
                example: "<html>...</html>"

  /register/verify-passcode:
    post:
      summary: Verifies the passcode entered by the user
      tags:
        - dashboard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The email of the user (must be registered)
                passcode:
                  type: string
                  description: The passcode entered by the user (received via SMS)
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad Request – Invalid passcode or email mismatch
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid passcode or email mismatch"
        '500':
          description: Internal server error – Error occurred during passcode verification

  /user/transactions:
    patch:
      summary: Add transaction to the list of user transactions
      tags:
        - dashboard
      description: Adds a new transaction for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                transaction:
                  $ref: '#/components/schemas/Transaction'
                  description: New transaction to execute
      responses:
        '200':
          description: Successfully updated the user's transactions
        '400':
          description: Invalid input or malformed request body
        '404':
          description: User not found

    get:
      summary: Retrieve the list of transactions for a user
      tags:
        - dashboard
      description: Returns all transactions associated with the user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully retrieved the user's transactions
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                    description: List of transactions to be associated with the user
                description: A list of transactions for the user
        '404':
          description: User not found

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Transaction:
      type: object
      properties:
        receiver:
          type: string
          description: Email of user to send to
        amount: 
          type: integer
          description: Amount involved in the transaction

    User:
      type: object
      properties:
        email:
          type: string
        id:
          type: integer
        phone:
          type: string
        amount:
          type: integer
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'

    NewUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        name:
          type: string

    LoginUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
